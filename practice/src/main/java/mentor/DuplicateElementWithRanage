Q1 - Given an array of n elements containing elements from 0 to n-1, 
with any of these numbers appearing any number of times, find these
 repeating numbers in O(n) and using only constant memory space.

Input: n = 7 , array = {1, 2, 3, 1, 3, 6, 6}
Output: 1, 3 and 6.
Explanation: Duplicate element in the array are 1 , 3 and 6
clarifications: all positive numbers , 0 would be included
Naive Approach :
 
 sort the array , check element in the loop , if a[i] == a[i+1]
 print(a[i]);
 tc : 0 (n logn)
 sc O(1)
 
 Optimization:
 1 2 3 1 3 6 6
 0 1 2 3 4 5 6
   8 9 10	13
a[element ] =  length + element
a[1] = 2  / n =7+1 = 8/7 = 1, 1
a[2] = 3 / 7+2
a[3] = / 7+3 = 17/7 = 2, 3
a[1] > n > duplicate .. print it
a[3]  > n duplicate .. print it
a[6] < n ... 7+6
a[6]  > n duplicate .. print it

 
2 + 7 + 7 + 7 = 23
index + n+element

